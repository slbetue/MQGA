name: Release

run-name: Patch QQ

# 控制工作流何时运行
on:
  schedule:
    - cron: "30 1 * * 4"
  # Runs at 01:30 (UTC time), only on Thursday
  # “肯德基疯狂星期四”仅限9:30-23:00供应，具体以餐厅实际营业时间为准。
  # https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows#repository_dispatch
  repository_dispatch:
    types: [release]

  # 每次提交时运行工作流
  push:
    branches: ["main"]

  # 允许手动运行工作流
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  check-updates:
    name: Version Checker 版本检查
    runs-on: ubuntu-latest
    outputs:
      build_needed: ${{ steps.version_check.outputs.build_needed }}
      QQ_version: ${{ steps.get_qq_version.outputs.QQ_version }}
      QAuxiliary_version: ${{ steps.QAuxiliary.outputs.release }}
      XAutoDaily_version: ${{ steps.XAutoDaily.outputs.release }}
      TSBattery_version: ${{ steps.TSBattery.outputs.release }}
      QQCleaner_version: ${{ steps.QQCleaner.outputs.release }}
      LSPatch_version: ${{ steps.LSPatch.outputs.release }}

      QAuxiliary_description: ${{ steps.QAuxiliary.outputs.description }}
      XAutoDaily_description: ${{ steps.XAutoDaily.outputs.description }}
      TSBattery_description: ${{ steps.TSBattery.outputs.description }}
      QQCleaner_description: ${{ steps.QQCleaner.outputs.description }}

    steps:
      - uses: actions/checkout@v4

      - name: Set ENV values from YAML
        uses: dcarbone/yaml-to-env-action@v3
        with:
          yaml-file: config.yml

      # 模块版本检测
      - id: QAuxiliary
        uses: pozetroninc/github-action-get-latest-release@v0.8.0
        with:
          repository: cinit/QAuxiliary
          excludes: prerelease, draft
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: XAutoDaily
        uses: pozetroninc/github-action-get-latest-release@v0.8.0
        with:
          repository: LuckyPray/XAutoDaily
          excludes: prerelease, draft
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: TSBattery
        uses: pozetroninc/github-action-get-latest-release@v0.8.0
        with:
          repository: fankes/TSBattery
          excludes: prerelease, draft
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: QQCleaner
        uses: pozetroninc/github-action-get-latest-release@v0.8.0
        with:
          repository: KitsunePie/QQCleaner
          excludes: prerelease, draft
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: LSPatch
        uses: pozetroninc/github-action-get-latest-release@v0.8.0
        with:
          repository: ${{ ENV.CUSTOM_LSPATCH_REPO }}
          excludes: prerelease, draft
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get QQ Version 获取 QQ 版本
        id: get_qq_version
        run: |
          response=$(curl -s -X POST -H "Content-Type: application/json" -d '{"packagename":"com.tencent.mobileqq"}' https://upage.html5.qq.com/wechat-apkinfo)
          clean_response=$(echo "$response" | tr -cd '[:print:]')
          version_name=$(echo "$clean_response" | jq -r '.app_detail_records."com.tencent.mobileqq".apk_all_data.version_name')
          echo "QQ_version=$version_name" >> $GITHUB_OUTPUT

      # 版本比对逻辑
      - name: Version Comparison 版本对比
        id: version_check
        run: |
          # 获取历史版本号记录
          gh release download -O versions.json --pattern 'versions.json' || echo "{}" > versions.json

          # 生成当前版本号数据
          current_versions=$(jq -n \
            --arg QQ_version "${{ steps.get_qq_version.outputs.QQ_version }}" \
            --arg QAuxiliary_version "${{ steps.QAuxiliary.outputs.release }}" \
            --arg XAutoDaily_version "${{ steps.XAutoDaily.outputs.release }}" \
            --arg TSBattery_version "${{ steps.TSBattery.outputs.release }}" \
            --arg QQCleaner_version "${{ steps.QQCleaner.outputs.release }}" \
            --arg LSPatch_version "${{ steps.LSPatch.outputs.release }}" \
            '{
              QQ: $QQ_version,
              QAuxiliary: $QAuxiliary_version,
              XAutoDaily: $XAutoDaily_version,
              TSBattery: $TSBattery_version,
              QQCleaner: $QQCleaner_version,
              LSPatch: $LSPatch_version
            }')

          # 版本比对
          if [[ "$(cat versions.json)" == "$current_versions" ]]; then
            echo "::notice::All versions are up-to-date 所有版本均为最新版"
            echo "build_needed=false" >> $GITHUB_OUTPUT
          else
            echo "::notice::New version detected 检测到新版本"
            echo "$current_versions" > versions.json
            echo "build_needed=true" >> $GITHUB_OUTPUT
          fi

      # 检查是否强制启用修补
      - name: Force Mode Check 强制修补检查
        if: ENV.FORCE == 'true'
        run: |
          echo "build_needed=true" >> $GITHUB_OUTPUT
          echo "::notice::Forced mode: enabled 强制修补：开启"

      # 上传版本信息记录文件
      - uses: actions/upload-artifact@v4
        if: steps.version_check.outputs.build_needed == 'true'
        with:
          name: version-info
          path: versions.json
 
  build:
    name: Build Release 构建 Releases
    needs: check-updates
    if: needs.check-updates.outputs.build_needed == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Set ENV values from YAML
        uses: dcarbone/yaml-to-env-action@v3
        with:
          yaml-file: config.yml

      # 下载版本记录资源
      - uses: actions/download-artifact@v4
        with:
          name: version-info
          path: .

      - name: Download Custom QQ 下载自定义 QQ 版本
        if: ENV.CUSTOM_ENABLE == 'true'
        run: |
          wget -q -U "Mozilla/5.0" -O QQ-custom.apk "${{ ENV.CUSTOM_QQ_DOWNLOAD_LINK }}"
        # gh release download -O QQ-8.9.58.apk --repo Hakuin123/MQGA READY --pattern QQ_8.9.58_64_HB2.apk
        # 可以更改此处以自定义需要修补的 QQ 版本，可以添加多个（统一打包并上传）

      - name: Download Latest QQ 下载最新版 QQ
        if: ENV.LATEST_ENABLE == 'true'
        run: |
          wget -q -U "Mozilla/5.0" -O "QQ-${{ needs.check-updates.outputs.QQ_version }}-latest.apk" \
            $(curl -s -X POST -H "Content-Type: application/json" -d '{"packagename":"com.tencent.mobileqq"}' \
            https://upage.html5.qq.com/wechat-apkinfo | tr -cd '[:print:]' | jq -r '.app_detail_records."com.tencent.mobileqq".apk_all_data.url')

      # 下载LSPatch
      - name: Download LSPatch 下载LSPatch
        run: gh release download -O LSPatch.jar --repo ${{ ENV.CUSTOM_LSPATCH_REPO }} --pattern '*.jar'

      # 下载模块
      - name: Download Modules 下载模块
        run: |
          gh release download -O QAuxiliary.apk --repo cinit/QAuxiliary     --pattern '*arm64.apk'
          gh release download -O XAutoDaily.apk --repo LuckyPray/XAutoDaily --pattern '*.apk'
          gh release download -O TSBattery.apk  --repo fankes/TSBattery     --pattern '*.apk'
          gh release download -O QQCleaner.apk  --repo KitsunePie/QQCleaner --pattern '*.apk'

      - name: Download Custom Modules 下载自定义模块
        if: ENV.CUSTOM_MODULES_CUSTOM == 'true'
        run: wget -q -U "Mozilla/5.0" -O custom-module.apk "${{ ENV.CUSTOM_MODULES_DOWNLOAD_LINK }}"

      # 开始修补 QQ
      - name: Patch QQ 修补各版本 QQ
        run: |
         if "${{ ENV.CUSTOM_MODULES_CUSTOM }}" == "true" ; then
           java -jar LSPatch.jar QQ-*.apk -m QAuxiliary.apk,XAutoDaily.apk,TSBattery.apk,QQCleaner.apk,custom-module.apk -l 2
         else
           java -jar LSPatch.jar QQ-*.apk -m QAuxiliary.apk,XAutoDaily.apk,TSBattery.apk,QQCleaner.apk -l 2
         fi
        # 这个写法烂透了但是只是权宜之计，等到选择启用模块列表功能完成后这里的逻辑也将被替换，或者欢迎 PR

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *-lspatched.apk
            versions.json
          tag_name: ${{ github.run_id }} # 存储库中每个工作流运行的唯一编号
          name: QQ Release ${{ needs.check-updates.outputs.QQ_version }} # 使用 QQ 版本号作为标题
          body: |
            ### 本次修补使用的项目（不含自定义 QQ/模块）
            | 项目名称 | 对应版本 | 查看项目 |
            | ------- | -------- | ------- |
            | QQ 最新版本 | ${{ needs.check-updates.outputs.QQ_version }}         | [QQ 官网](https://im.qq.com/index)|
            | QAuxiliary | ${{ needs.check-updates.outputs.QAuxiliary_version }} | [GitHub](https://github.com/cinit/QAuxiliary) |
            | XAutoDaily | ${{ needs.check-updates.outputs.XAutoDaily_version }} | [GitHub](https://github.com/LuckyPray/XAutoDaily) |
            | TSBattery  | ${{ needs.check-updates.outputs.TSBattery_version }}  | [GitHub](https://github.com/fankes/TSBattery) |
            | QQCleaner  | ${{ needs.check-updates.outputs.QQCleaner_version }}  | [GitHub](https://github.com/KitsunePie/QQCleaner) |
            | LSPatch    | ${{ needs.check-updates.outputs.LSPatch_version }}    | [GitHub](https://github.com/${{ ENV.CUSTOM_LSPATCH_REPO }})

            <details><summary>点击展开模块更新日志</summary>
            #### QAuxiliary<br>
            ${{ needs.check-updates.outputs.QAuxiliary_description }}
            #### XAutoDaily<br>
            ${{ needs.check-updates.outputs.XAutoDaily_description }}
            #### TSBattery<br>
            ${{ needs.check-updates.outputs.TSBattery_description }}
            #### QQCleaner<br>
            ${{ needs.check-updates.outputs.QQCleaner_description }}
            </details>

            ### 发行说明
            您应该会在页面下方的 Assets 看到如下文件：
            - QQ-`版本号`-`LSPatch 内部版本号`-lspatched.apk
                此为自定义版本号修补的 QQ Android 版本
            - QQ-${{ needs.check-updates.outputs.QQ_version }}-latest-`LSPatch 内部版本号`-lspatched.apk
                此为基于 QQ Android 当前最新版本修补的版本
            > 基于最新版 QQ 修补的版本，部分模块功能可能因为未适配而失效，请酌情使用
            - versions.json
                此为本次修补使用的版本信息

            **Have fun!**
